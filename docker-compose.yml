version: "3.8"
services:
  reverse-proxy:
    # The official v2 Traefik docker image
    image: traefik:v2.2
    # Enables the web UI and tells Traefik to listen to docker
    command:
      - "--api.insecure=true"
      - "--providers.docker"
      - "--providers.docker.exposedByDefault=false"
    ports:
      # The HTTP port
      - "80:80"
      # The Web UI (enabled by --api.insecure=true)
      - "8080:8080"
    volumes:
      # So that Traefik can listen to the Docker events
      - /var/run/docker.sock:/var/run/docker.sock
  postgres-account:
    image: "postgres:alpine"
<<<<<<< HEAD
    container_name: postgres-account
    environment:
      - POSTGRES_PASSWORD=password
      # - POSTGRES_USER=postgres
      # - POSTGRES_DB=postgres
=======
    environment:
      - POSTGRES_PASSWORD=password
>>>>>>> 3999c5b64d9e82200d4e850d267e0d3ed56f0643
    ports:
      - "5432:5432"
    #   Set a volume for data and initial sql script
    #   May configure initial db for future demo
    volumes:
      - "pgdata_account:/var/lib/postgresql/data"
      # - ./init:/docker-entrypoint-initdb.d/
    command: ["postgres", "-c", "log_statement=all"]
  redis-account:
    image: "redis:alpine"
    ports:
      - "6379:6379"
    volumes:
      - "redisdata:/data"
  account:
    build:
      context: ./account
      target: builder
    image: account
<<<<<<< HEAD
    env_file: ./.env.dev
=======
    env_file: ./account/.env.dev
>>>>>>> 3999c5b64d9e82200d4e850d267e0d3ed56f0643
    expose:
      - "8080"
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.account.rule=Host(`malcorp.test`) && PathPrefix(`/api/account`)"
<<<<<<< HEAD
      - "traefik.http.services.account.loadbalancer.server.port=8080"
=======
>>>>>>> 3999c5b64d9e82200d4e850d267e0d3ed56f0643
    environment:
      - ENV=dev
    volumes:
      - ./account:/go/src/app
    # have to use $$ (double-dollar) so docker doesn't try to substitute a variable
    depends_on:
      - postgres-account
      - redis-account
<<<<<<< HEAD
=======
      - reverse-proxy
>>>>>>> 3999c5b64d9e82200d4e850d267e0d3ed56f0643
    command: reflex -r "\.go$$" -s -- sh -c "go run ./"
  account-client:
    build:
      context: ./account-client
    image: account-client # if we don't give image name, traefik won't create router ü§∑‚Äç‚ôÇÔ∏è
    expose:
      - "3000"
    ports:
      - "3000:3000"
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.account-client.rule=Host(`malcorp.test`) && PathPrefix(`/account`)"
<<<<<<< HEAD
      - "traefik.http.services.account-client.loadbalancer.server.port=3000"
    volumes:
      - ./account-client:/app
      - /app/node_modules
    working_dir: /app
    # command: sh -c "npm install && npm run dev -- --host --port 3000"
=======
    volumes:
      - ./account-client:/app
      - /app/node_modules #avoid overwriting node_modules
>>>>>>> 3999c5b64d9e82200d4e850d267e0d3ed56f0643
    depends_on: 
      - reverse-proxy    
volumes:
  pgdata_account:
<<<<<<< HEAD
  redisdata:
=======
  redisdata:
>>>>>>> 3999c5b64d9e82200d4e850d267e0d3ed56f0643
